#include<stdio.h>

struct Process {
    int pid; 
    int burst_time; 
    int priority; 
    int remaining_time;
};

int findHighestPriority(struct Process processes[], int n) {
    int highest_priority = -1;
    int index = -1;
    for (int i = 0; i < n; i++) {
        if (processes[i].remaining_time > 0 && (highest_priority == -1 || processes[i].priority < highest_priority)) {
            highest_priority = processes[i].priority;
            index = i;
        }
    }
    return index;
}

void preemptivePriorityScheduling(struct Process processes[], int n) {
    int total_time = 0;
    int completed = 0;
    
    printf("Gantt Chart:\n");
    while (completed < n) {
        int index = findHighestPriority(processes, n);
        if (index == -1) {
            total_time++;
            continue;
        }
        printf("P%d ", processes[index].pid);
        processes[index].remaining_time--;
        total_time++;
        if (processes[index].remaining_time == 0) {
            completed++;
        }
    }
    printf("\nTotal Time: %d\n", total_time);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    struct Process processes[n];
    
    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }
    
    preemptivePriorityScheduling(processes, n);
    
    return 0;
}
