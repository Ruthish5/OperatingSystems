#include <stdio.h>

#define MAX_PROCESS 10
#define TIME_QUANTUM 2

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
};

void roundRobin(struct Process processes[], int n) {
    int remaining_processes = n;
    int current_time = 0;
    int time_quantum = TIME_QUANTUM;

    printf("Time  Process\n");

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                int execute_time = (processes[i].remaining_time < time_quantum) ? processes[i].remaining_time : time_quantum;
                printf("%d-%d  P%d\n", current_time, current_time + execute_time, processes[i].pid);

                current_time += execute_time;
                processes[i].remaining_time -= execute_time;

                if (processes[i].remaining_time == 0) {
                    remaining_processes--;
                }
            }
        }
    }
}

int main() {
    int n;
    struct Process processes[MAX_PROCESS];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    roundRobin(processes, n);

    return 0;
}
